#!/bin/bash

cd $(dirname $0)
. ./common.sh

usage() {
	echo "Usage:  $0 <COMMAND>

Initialization:
   init            - reset and recreate all needed for developing
   gen-configs     - regenerate all configs for developer's environment
   db-reset        - delete database and reset it to initial scheme
   db-seed         - seed with demo data (the current data will be cleared!)

Controll daemons (nginx, apache, hub):
   all-start       - start all
   all-stop        - stop all
   all-restart     - restart one by one

Other
   db-console      - open PSQL console with needed credentials
"
exit 1;
}

PHP_CONFIG=${SRC_ROOT}/lib/config.php
SCHEME=${SRC_ROOT}/data/scheme/scheme.sql
SEED_DIR=${SRC_ROOT}/data/seed
SEED=${SEED_DIR}/seed.sql

HUB_CONFIG_TEMPLATE=${CONF_DIR}/hub.config.template

gen-configs() {
	convert_tmpl $PHP_CONFIG.template $PHP_CONFIG
	echo "config.php has been regenerated"

	export GPROC_OPTIONS=$(gproc_options)
	convert_tmpl $HUB_CONFIG_TEMPLATE $HUB_CONFIG
	echo "hub.config has been regenerated"

}

db-reset() {
	# stop hub with logic. It can prevent dropdb
	${SRC_ROOT}/scripts/hub 'stop'
	HUB_FAILED_TO_STOP=$?

	# stop apche. It can preven dropdb too
	${SRC_ROOT}/scripts/apache 'stop'
	APACHE_FAILED_TO_STOP=$?

	# dropdb if exists
	if psql --list | grep $DATABASE >/dev/null ; then
		dropdb $DATABASE || exit 1
	fi

	# create it again
	createdb $DATABASE || exit 1

	# Create special user
	dropuser $DB_USER 2>/dev/null || true
 	psql $DATABASE -c "CREATE USER ${DB_USER} WITH PASSWORD '${DB_PASS}' LOGIN" >/dev/null

	# Prepare scheme
	TMP_SCHEME=${TMP_DIR}/scheme.sql
	cp $SCHEME ${TMP_SCHEME}
	sed -i $TMP_SCHEME -e "s/mapcrafter/$DB_USER/g";
	psql -d ${DATABASE} <${TMP_SCHEME} >/dev/null
	echo "Developer's database has been recreated"

	# Clear static files (kml,wms etc)
	rm -f ${SRC_ROOT}/static/kml/*.kml
	rm -f ${SRC_ROOT}/data/wms/*.map

	# start apache again if it was stopped
	if [ $APACHE_FAILED_TO_STOP = 0 ] ; then
		${SRC_ROOT}/scripts/apache 'start'
	fi

	# start hub again if it was stopped
	if [ $HUB_FAILED_TO_STOP = 0 ] ; then
		${SRC_ROOT}/scripts/hub 'start'
	fi
}

db-seed() {
	# firstly reset all
	db-reset

	psql -d ${DATABASE} <$SEED >/dev/null

	# Restore saved static files (kml, wms, etc)
	cp -f ${SEED_DIR}/kml/* ${SRC_ROOT}/static/kml
	cp -f ${SEED_DIR}/wms/* ${SRC_ROOT}/data/wms

	echo "Test data successfully seeded"
}

db-seed() {
	# firstly reset all
	db-reset

	psql -d ${DATABASE} <$SEED >/dev/null

	# Restore saved static files (kml, wms, etc)
	cp -f ${SEED_DIR}/kml/* ${SRC_ROOT}/static/kml
	cp -f ${SEED_DIR}/wms/* ${SRC_ROOT}/data/wms

	echo "Test data successfully seeded"
}

db-console() {
	export PGOPTIONS="-c search_path=mapcraft,public"
	psql -d ${DATABASE}
}

compile-hub() {
	echo "Compiling and getting all dependencies for hub ..."
	cd ${SRC_ROOT}/hub
	make all || exit 1;
	echo "Hub has been compiled"
}

daemons-do() {
	for daemon in nginx apache hub code-reloader ; do
		${SRC_ROOT}/scripts/$daemon "$@"
	done
}

gproc_options() {
	ERL_VERSION=$(get_version erlang)

	# Disable ETS tunning on erlang < 14B
	if ! version_ge $ERL_VERSION 1:14.b ; then
		echo "
         {ets_options, []}"
	fi
}

case "$1" in
	init)
		compile-hub
		gen-configs
		db-seed
		;;
	db-reset)
		db-reset
		;;
	db-seed)
		db-seed
		;;
	db-console)
		db-console
		;;
	gen-configs)
		gen-configs
		;;
	all-start)
		daemons-do 'start'
		;;
	all-stop)
		daemons-do 'stop'
		;;
	all-restart)
		daemons-do 'restart'
		;;
	*)
		usage;
esac
